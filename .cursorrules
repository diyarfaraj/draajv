Du är nu en senior full-stack-utvecklare som skriver produktion-redo kod i Next .js 14 (App Router) med TypeScript. Generera en fullständig, responsiv körjournal-webbapp för den svenska marknaden med följande specifikationer:

1  – Teknisk stack
Next .js 14 med App Router och filsystem-routing (app/).

TypeScript i hela koden.

Tailwind CSS ^3 (dark-/light-mode via class-strategi och @tailwindcss/forms).

shadcn/ui-komponenter (Card, Button, Dialog, AlertDialog osv).

Zustand för global state + localForage (IndexedDB-wrapper) för beständig lagring.

next-pwa för service-worker/cache och manifest.webmanifest (+ ikoner).

Ingen backend/databas – all data lagras i webbläsaren.

Paket­hanterare: pnpm.

2  – Funktionella krav
Formulär för ny körning: datum, start- & sluttid, start/stop-mätarställning, syfte, ort.

Automatisk uträkning av körd sträcka (slut-start).

Validering i realtid (Zod + React-Hook-Form); felmeddelanden på svenska.

Lista med alla körningar, sorterad nyast överst. Varje rad har Redigera & Radera (Dialog).

Summering av total körsträcka per månad/år (visas över listan).

Sök/filtrera på datumintervall & syfte.

Exportera CSV (semikolon, UTF-8) enligt Skatteverkets spec med nedladdningsknapp.

3  – Tillgänglighet & UX
All UI-text på svenska; datum visas som 2025-05-31 kl 08:30.

Mobil-först. Flexbox/Grid. Följer WCAG 2.2 AA.

Keyboard-navigation, aria-labels, fokus-synlighet.

4  – Projektstruktur
bash
Copy
Edit
.
├─ app/
│  ├─ layout.tsx
│  ├─ page.tsx                 # Huvudsida med lista & formulär
│  ├─ export/page.tsx          # CSV-export
│  └─ _components/             # delade UI-komponenter
├─ lib/                        # hjälpfunktioner, typer
├─ store/                      # Zustand-store
├─ public/manifest.webmanifest
├─ tailwind.config.ts
└─ next.config.mjs
Förklara kort vad varje mapp gör i kommentaren ovanför kodblocken.

5  – PWA
Offlinestöd via next-pwa (Cache First för statiska resurser, Network First för API-liknande reads).

manifest.webmanifest med svenska namn/ikoner (512 px, 192 px).

6  – Kvalitetskrav
Skriv modulär, kommenterad kod.

Använd ESLint + Prettier-konfig (skapa .eslintrc.cjs, .prettierrc).

Testa kritiska helpers med Vitest.

7  – Leveransformat
Presentera varje fil i separata kodblock:

ts
Copy
Edit
// file: app/page.tsx
…kod…

Inled med 5 korta rader som beskriver hur man:

klonar/installerar (pnpm i),

kör lokalt (pnpm dev),

bygger PWA (pnpm build && pnpm start),

återställer data (localForage.clear() i Console),

kör tester (pnpm test).

Inga externa CDN-länkar – ladda ikoner lokalt eller använd systemfont.

Generera nu hela koden fil-för-fil enligt ovan. Se till att allt kompilerar i Next .js 14 med TypeScript utan fel.